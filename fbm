#!/usr/bin/env python

import re
import os
import json
import copy
from utils import directory, messages
import argparse

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument(
		'-c',
		'--commit',
		default = False,
		action = 'store_true',
	)
	return vars(parser.parse_args())
	
def fix_bookmarks():
	args = parse_args()
	
	# read in bookmarks
	HOME = os.environ['HOME']
	bm_path = f'{HOME}/.local/share/mcomix/bookmarks.json'
	with open(bm_path, 'r') as f:
		bm = json.loads(f.read())

	# save backup
	with open(bm_path + '.bak', 'w') as f:
		f.write(json.dumps(bm))
	
	#pattern = r'^\(C[0-9]+\)|^\(COMIC.+\)'
	pattern = r'^\(C[0-9]+\)|^\(COMIC....\)'
	
	bm_old = copy.deepcopy(bm)

	broken_files = []
	counter = 0
	for i, sample in enumerate(bm_old[1]):
		
		old_name = sample[0]
		if re.match(pattern, old_name):
			new_name = re.sub(pattern, '', old_name).strip()
			
			old_path = sample[1]
			new_path  = old_path.replace(old_name, new_name)
			if not directory.file_exists(new_path):
				broken_files.append(
					[new_name, new_path] +
					sample[2:]
				)
			bm[1][i] = [new_name, new_path] + sample[2:]
			counter += 1
	
	# write back to bookmarks.json if commit flag is raised
	if args['commit']:
		with open(bm_path, 'w') as f:
			f.write(json.dumps(bm))
		commit_msg = 'Changes committed'
	else:
		commit_msg = 'Changes not committed. run with -c to commit'

	# print warning message
	names = [sample[0] for sample in broken_files]
	if len(names) > 0:
		msg = f'{counter} bookmarks fixed. The following are not valid files:'
		print('\n' + messages.with_fill(length=len(msg)))
		print(commit_msg)
		print(msg)
		print(messages.with_fill(length=len(msg)), end='\n\n')
		print('\n'.join(names))
		print('\n' + messages.with_fill(length=len(msg)))
	else:
		msg = f'{counter} bookmarks fixed. no invalid files found'
		print('\n' + messages.with_fill(length=len(msg)))
		print(commit_msg)
		print(msg)
		print(messages.with_fill(length=len(msg)), end='\n\n')
		

if __name__ == '__main__':
	fix_bookmarks()
